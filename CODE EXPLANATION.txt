#include <ADXL345.h>                //Setup free IMU libraries                        
#include <bma180.h>
#include <HMC58X3.h>
#include <ITG3200.h>
#include <MS561101BA.h>
#include <I2Cdev.h>                 //Library for i2c interface
#include <MPU60X0.h>
#include <EEPROM.h>                  //library for eeprom interface 
//#define DEBUG
#include "DebugUtils.h"
#include "CommunicationUtils.h"
#include "FreeIMU.h"
#include <Wire.h>              
#include <SPI.h>                     //library for serial data 
#include <Servo.h>
int raw_values[9];                   //array for storing raw values
//char str[512];
float ypr[3]; // yaw pitch roll      //array for storing filtered values
float val[9];                        //array for storing past values
Servo servo1;                        //creation of servo objects for movement
Servo servo2;
Servo servo3;
float old[3];                    
float apple[3];
int flag1;
int flag2;
// Set the FreeIMU object
FreeIMU my3IMU = FreeIMU();        //creation of imu object
void setup() {
 Serial.begin(9600);              //begin serial data tx at 9600 baud rate
 Wire.begin();                    //start reciving data from i2c interface
 servo1.attach(8);                //attach servo motor to port 8 of arduino
 servo2.attach(9);    
 servo3.attach(10);
 flag1=1;                        //set flags to 1
 flag2=1;
 apple[0]=apple[1]=apple[2]=0;    //set initial values of array to zero 
 old[0]=old[1]=old[2]=0;

 delay(5);
 my3IMU.init(); // the parameter enable or disable fast mode
 delay(5);
}
void loop() {

 my3IMU.getYawPitchRoll(ypr);//get yaw pitch roll from imu
 flag1 = analogRead(A0);    //monitor whether the switch is on or off for platform stabilisation
 if (flag1<500)          //if off then set flag 2
{ flag2 = 1;
}
else
{
 flag2 =0;              //else reset flag2 
}

 if(ypr[0]-old[0]<0.16 && ypr[0]-old[0]>-0.16)      //if delta is between 0.16 and -0.16 then print yaw
 {
 Serial.print("Yaw: ");
 Serial.print(apple[0]);
 }
 if((ypr[0]-old[0]<90 && ypr[0]-old[0]>=0.16) || (ypr[0]-old[0]>-90 && ypr[0]-old[0]<=-0.16)) // if delta is btw 0.16 and 90  OR -90  and -.16 then print yaw and update yaw by adding delta  to it 
 {
 Serial.print("Yaw: ");
 apple[0]=apple[0]+ypr[0]-old[0];
 Serial.print(apple[0]);
 if(apple[0]>-90 && apple[0]<90)
 {
 if (flag2==1)
 { servo1.write(90+apple[0]);        // if the switch is not in stabilised position then write the yaw value to servo motor so  by adding  90 to it
 }
 else
 {
 servo1.write(90-apple[0]);             //if switch is in stabilised position then write yaw to the motor by subtracting it from 90
 }
 Serial.print("***");                  //to show that data is written into the motor
 }
 }

 if(ypr[0]-old[0]>=90 || ypr[0]-old[0]<=-90)                                //if yaw is greater than 90 or less than -90 then simply tx the data to the serial port that means the data is written on servo motor if delta value is between 90 and -90
 {
 Serial.print("Yaw: ");
 Serial.print(apple[0]);
 }
 if((ypr[1]-old[1])>0.12 || (-ypr[1]+old[1])>0.12)                                      
 {
 Serial.print(" Pitch: ");
 apple[1]=ypr[1];
 Serial.print(apple[1]);
 if (flag2==1)
 { servo2.write(92.5-apple[1]);           // if platform is in non stabilisation state then write data to the servo
 }
 else
 {
 servo2.write(90+apple[1]);                 // if the platform is in stabilisation state then write the data  to the servo 
 }
 }

 else
 {
 Serial.print(" Pitch: ");
 Serial.print(apple[1]);
 }

 if((ypr[2]-old[2])>0.12 || (-ypr[2]+old[2])>0.12) 
 {
 Serial.print(" Roll: ");
 apple[2]=ypr[2];
 Serial.print(apple[2]);
 if (flag2==1)
 { servo3.write(87+apple[2]);
 }
 else
 {
 servo3.write(87-apple[2]);
 }
 }

 else
 {
 Serial.print(" Roll: ");
 Serial.print(apple[2]);
 }

 old[0]=ypr[0];                          //store current values of yaw pitch roll in old array
 old[1]=ypr[1];
 old[2]=ypr[2];
 Serial.print(" OYaw: ");            //tx old values through serial port 
 Serial.print(ypr[0]);
 Serial.print(" OPitch: ");
 Serial.print(ypr[1]);
 Serial.print(" ORoll: ");
 Serial.print(ypr[2]);
 Serial.println("");
 delay(10);